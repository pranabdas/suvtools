"use strict";(self.webpackChunksuvtools=self.webpackChunksuvtools||[]).push([[291],{3905:function(e,a,t){t.d(a,{Zo:function(){return o},kt:function(){return u}});var n=t(7294);function s(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function m(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){s(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,s=function(e,a){if(null==e)return{};var t,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var i=n.createContext({}),l=function(e){var a=n.useContext(i),t=a;return e&&(t="function"==typeof e?e(a):m(m({},a),e)),t},o=function(e){var a=l(e.components);return n.createElement(i.Provider,{value:a},e.children)},N="mdxType",k={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},c=n.forwardRef((function(e,a){var t=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,o=p(e,["components","mdxType","originalType","parentName"]),N=l(t),c=s,u=N["".concat(i,".").concat(c)]||N[c]||k[c]||r;return t?n.createElement(u,m(m({ref:a},o),{},{components:t})):n.createElement(u,m({ref:a},o))}));function u(e,a){var t=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var r=t.length,m=new Array(r);m[0]=c;var p={};for(var i in a)hasOwnProperty.call(a,i)&&(p[i]=a[i]);p.originalType=e,p[N]="string"==typeof e?e:s,m[1]=p;for(var l=2;l<r;l++)m[l]=t[l];return n.createElement.apply(null,m)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5309:function(e,a,t){t.r(a),t.d(a,{assets:function(){return o},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return p},metadata:function(){return l},toc:function(){return N}});var n=t(7462),s=t(3366),r=(t(7294),t(3905)),m=["components"],p={title:"Glossary"},i=void 0,l={unversionedId:"glossary",id:"glossary",title:"Glossary",description:"calc_area",source:"@site/docs/glossary.md",sourceDirName:".",slug:"/glossary",permalink:"/suvtools/docs/glossary",draft:!1,editUrl:"https://github.com/pranabdas/suvtools/blob/main/docs/glossary.md",tags:[],version:"current",frontMatter:{title:"Glossary"},sidebar:"docs",previous:{title:"Examples",permalink:"/suvtools/docs/examples"},next:{title:"License",permalink:"/suvtools/docs/license"}},o={},N=[{value:"calc_area",id:"calc_area",level:2},{value:"fit_gauss",id:"fit_gauss",level:2},{value:"fit_lorentz",id:"fit_lorentz",level:2},{value:"load",id:"load",level:2},{value:"lock_peak",id:"lock_peak",level:2},{value:"norm_bg",id:"norm_bg",level:2},{value:"save_csv",id:"save_csv",level:2}],k={toc:N},c="wrapper";function u(e){var a=e.components,t=(0,s.Z)(e,m);return(0,r.kt)(c,(0,n.Z)({},k,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"calc_area"},"calc_area"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"area = suv.calc_area(y, x, x_start=None, x_end=None)\n")),(0,r.kt)("p",null,"Calculates area under the curve for given ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y")," values. ",(0,r.kt)("inlineCode",{parentName:"p"},"x_start")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"x_end")," can be specified to set the limit of integration region, if not provided\nwhole range is integrated."),(0,r.kt)("div",{className:"math math-display"},(0,r.kt)("span",{parentName:"div",className:"katex-display"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"A"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("msubsup",{parentName:"mrow"},(0,r.kt)("mo",{parentName:"msubsup"},"\u222b"),(0,r.kt)("mrow",{parentName:"msubsup"},(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,r.kt)("mi",{parentName:"mrow"},"s"),(0,r.kt)("mi",{parentName:"mrow"},"t"),(0,r.kt)("mi",{parentName:"mrow"},"a"),(0,r.kt)("mi",{parentName:"mrow"},"r"),(0,r.kt)("mi",{parentName:"mrow"},"t")),(0,r.kt)("mrow",{parentName:"msubsup"},(0,r.kt)("mi",{parentName:"mrow"},"x"),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"_"),(0,r.kt)("mi",{parentName:"mrow"},"e"),(0,r.kt)("mi",{parentName:"mrow"},"n"),(0,r.kt)("mi",{parentName:"mrow"},"d"))),(0,r.kt)("mi",{parentName:"mrow"},"y"),(0,r.kt)("mi",{parentName:"mrow"},"d"),(0,r.kt)("mi",{parentName:"mrow"},"x")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"A = \\int_{x\\_start}^{x\\_end} y dx")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"A"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"2.728em",verticalAlign:"-1.1289em"}}),(0,r.kt)("span",{parentName:"span",className:"mop"},(0,r.kt)("span",{parentName:"span",className:"mop op-symbol large-op",style:{marginRight:"0.44445em",position:"relative",top:"-0.0011em"}},"\u222b"),(0,r.kt)("span",{parentName:"span",className:"msupsub"},(0,r.kt)("span",{parentName:"span",className:"vlist-t vlist-t2"},(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.599em"}},(0,r.kt)("span",{parentName:"span",style:{top:"-1.7881em",marginLeft:"-0.4445em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"x"),(0,r.kt)("span",{parentName:"span",className:"mord mtight",style:{marginRight:"0.02778em"}},"_"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"s"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"t"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"a"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight",style:{marginRight:"0.02778em"}},"r"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"t")))),(0,r.kt)("span",{parentName:"span",style:{top:"-3.8129em",marginRight:"0.05em"}},(0,r.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,r.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mtight"},(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"x"),(0,r.kt)("span",{parentName:"span",className:"mord mtight",style:{marginRight:"0.02778em"}},"_"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"e"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"n"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal mtight"},"d"))))),(0,r.kt)("span",{parentName:"span",className:"vlist-s"},"\u200b")),(0,r.kt)("span",{parentName:"span",className:"vlist-r"},(0,r.kt)("span",{parentName:"span",className:"vlist",style:{height:"1.1289em"}},(0,r.kt)("span",{parentName:"span"})))))),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"d"),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x")))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Inputs:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"y")," : 1D vectors of same length."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x_start")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"x_end")," : number (float or int), lower and upper limits of the\nintegration. Optional inputs.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Outputs:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"area")," : number (float). Area under the curve. Could take negative values\n(e.g., ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"y")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"y")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y")))))," is negative and ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"x")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"x")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x")))))," is positive).")),(0,r.kt)("h2",{id:"fit_gauss"},"fit_gauss"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"x_fit, y_fit = suv.fit_gauss(x, y, a=None, x0=None, sigma=None, xmin=None, xmax=None, num=1000)\n")),(0,r.kt)("p",null,"returns x, Gaussian fitted y values, and prints out relevant parameters. ",(0,r.kt)("inlineCode",{parentName:"p"},"xmin"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"xmax")," determines the range to fit. If ",(0,r.kt)("inlineCode",{parentName:"p"},"xmin")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"xmax")," are not provided,\nwhole range is used. ",(0,r.kt)("inlineCode",{parentName:"p"},"num")," determines the number of points returned in ",(0,r.kt)("inlineCode",{parentName:"p"},"x_fit"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"y_fit"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Inputs:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"y")," : 1D vectors of same length."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a")," : optional input, number, peak height in the units of ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"y")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"y")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"))))),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x0")," : optional input, number, peak position in ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"x")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"x")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"))))),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"sigma")," : optional input, number, width of peak."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"xmin")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"xmax")," : number (float or int), lower and upper bounds of fitting.\nOptional inputs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"num")," : length of returned vectors (",(0,r.kt)("inlineCode",{parentName:"li"},"x_fit")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"y_fit"),"). Optional input,\ndefault is 1000.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Outputs:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x_fit")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"y_fit")," : 1D vectors of length ",(0,r.kt)("inlineCode",{parentName:"li"},"num")," (default is 1000).")),(0,r.kt)("p",null,"It will also print out the relevant fitting parameters to the standard output."),(0,r.kt)("h2",{id:"fit_lorentz"},"fit_lorentz"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"x_fit, y_fit = suv.fit_lorentz(x, y, a=None, x0=None, gamma=None, xmin=None, xmax=None, num=1000)\n")),(0,r.kt)("p",null,"returns x, Lorentzian fitted y values, and prints out relevant parameters.\n",(0,r.kt)("inlineCode",{parentName:"p"},"xmin")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"xmax")," determines the range to fit. If ",(0,r.kt)("inlineCode",{parentName:"p"},"xmin")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"xmax")," are not\nprovided, whole range is used. ",(0,r.kt)("inlineCode",{parentName:"p"},"num")," determines the number of points returned\nin ",(0,r.kt)("inlineCode",{parentName:"p"},"x_fit")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y_fit"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Inputs:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"y")," : 1D vectors of same length."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a")," : optional input, number, peak height in the units of ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"y")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"y")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.625em",verticalAlign:"-0.1944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.03588em"}},"y"))))),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x0")," : optional input, number, peak position in ",(0,r.kt)("span",{parentName:"li",className:"math math-inline"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mi",{parentName:"mrow"},"x")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"x")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4306em"}}),(0,r.kt)("span",{parentName:"span",className:"mord mathnormal"},"x"))))),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"gamma")," : optional input, number, width of peak."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"xmin")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"xmax")," : number (float or int), lower and upper bounds of fitting.\nOptional inputs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"num")," : length of returned vectors (",(0,r.kt)("inlineCode",{parentName:"li"},"x_fit")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"y_fit"),"). Optional input,\ndefault is 1000.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Outputs:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x_fit")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"y_fit")," : 1D vectors of length ",(0,r.kt)("inlineCode",{parentName:"li"},"num")," (default is 1000).")),(0,r.kt)("p",null,"It will also print out the relevant fitting parameters to the standard output."),(0,r.kt)("h2",{id:"load"},"load"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'data = suv.load(filename, scan=None)\ndata = suv.load("datafile.txt", 2)\n')),(0,r.kt)("p",null,"It will return a two dimensional array with columns for various parameters. If\nthe second argument, i.e., the scan number is not specified, the code will read\nthe last scan from the file."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Inputs:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"filename")," : string, local or https file path."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scan")," : optional, integer, if no scan argument is provided it loads the last\nscan.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Outputs:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"data")," : 2D array. Rows represent different data points, while the columns\nare different parameters (energy, intensity etc.).")),(0,r.kt)("h2",{id:"lock_peak"},"lock_peak"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"data_corr = suv.lock_peak(data, refdata, x1=None, x2=None, E_col=0, I_col=9, I0_col=4)\n")),(0,r.kt)("p",null,"Locks peak position with respect to the reference data. It locks the maximum of\nintensity to the same energy; the range of peak search can be specified by input\n",(0,r.kt)("inlineCode",{parentName:"p"},"x1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"x2"),". If no bounds are given, it will find the maximum in the whole\ndata range."),(0,r.kt)("h2",{id:"norm_bg"},"norm_bg"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"int_corr = suv.norm_bg(energy, intensity, x1, x2, x_norm_loc=None)\n")),(0,r.kt)("p",null,"Removes linear background, and normalizes the data. ",(0,r.kt)("inlineCode",{parentName:"p"},"x1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"x2")," are energy values\nthat determines the slope of the background. By default the normalization done\nat the tail point of the spectra. It can be changed to other point, enter the\ncorresponding energy value as ",(0,r.kt)("inlineCode",{parentName:"p"},"x_norm_loc"),"."),(0,r.kt)("h2",{id:"save_csv"},"save_csv"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'suv.save_csv("datafile.txt", csvname=None, scan=None)\n')),(0,r.kt)("p",null,"saves scan to a csv file. The file will be saved in the save directory as\n",(0,r.kt)("inlineCode",{parentName:"p"},"datafile")," with name ",(0,r.kt)("inlineCode",{parentName:"p"},"datafile.csv")," unless  ",(0,r.kt)("inlineCode",{parentName:"p"},"csvname")," is specified. Like the\n",(0,r.kt)("inlineCode",{parentName:"p"},"load")," module, if the scan number is not specified, it will read the last scan\nfrom the file."))}u.isMDXComponent=!0}}]);